import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import re
import os

TOKEN = os.getenv("BOT_TOKEN")
# CHAT_ID = os.getenv("CHAT_ID", "PASTE_CHAT_ID_HERE")
CHAT_ID = None

bot = Bot(token=TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()
reminder_list = []
reminder_jobs = {}

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
                         "üìå –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:\n"
                         "/–Ω–∞–ø–æ–º–Ω–∏ 10 –º–∞—è –≤ 10:00 –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ø–æ—Ç–µ–∫—É\n"
                         "/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 08:30 –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –º—É—Å–æ—Ä\n"
                         "/–µ–∂–µ–º–µ—Å—è—á–Ω–æ 15 –≤ 12:00 –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç—ã\n"
                         "/—Å–ø–∏—Å–æ–∫ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                         "/—É–¥–∞–ª–∏—Ç—å 2 ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 2")

@dp.message(Command("—Å–ø–∏—Å–æ–∫"))
async def cmd_list(message: types.Message):
    if not reminder_list:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    reply = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
    for idx, r in enumerate(reminder_list, start=1):
        reply += f"{idx}. {r}\n"
    await message.answer(reply)

@dp.message(Command("—É–¥–∞–ª–∏—Ç—å"))
async def delete_reminder(message: types.Message):
    match = re.match(r"/—É–¥–∞–ª–∏—Ç—å (\d+)", message.text)
    if not match:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /—É–¥–∞–ª–∏—Ç—å 1")
        return
    idx = int(match.group(1)) - 1
    if 0 <= idx < len(reminder_list):
        desc = reminder_list.pop(idx)
        job_id = f"reminder_{idx}"
        job = reminder_jobs.pop(job_id, None)
        if job:
            job.remove()
        await message.answer(f"üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {desc}")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

@dp.message(Command("–Ω–∞–ø–æ–º–Ω–∏"))
async def set_reminder(message: types.Message):
    match = re.match(r"/–Ω–∞–ø–æ–º–Ω–∏ (\d{1,2}) (\w+) –≤ (\d{1,2}:\d{2}) (.+)", message.text, re.IGNORECASE)
    if not match:
        await message.answer("–§–æ—Ä–º–∞—Ç: /–Ω–∞–ø–æ–º–Ω–∏ 10 –º–∞—è –≤ 10:00 –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ø–æ—Ç–µ–∫—É")
        return

    day, month_str, time_str, task = match.groups()
    months = {
        "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
        "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
    }
    month = months.get(month_str.lower())
    if not month:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü.")
        return

    try:
        remind_time = datetime(datetime.now().year, month, int(day), *map(int, time_str.split(":")))
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ.")
        return

    description = f"{remind_time.strftime('%d.%m %H:%M')} ‚Äî {task}"
    reminder_list.append(description)

    job = scheduler.add_job(
        send_reminder,
        trigger=DateTrigger(run_date=remind_time),
        args=[task]
    )
    reminder_jobs[f"reminder_{len(reminder_list)-1}"] = job
    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {description}")

@dp.message(Command("–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"))
async def weekly_reminder(message: types.Message):
    match = re.match(r"/–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ (\w+) –≤ (\d{1,2}:\d{2}) (.+)", message.text, re.IGNORECASE)
    if not match:
        await message.answer("–§–æ—Ä–º–∞—Ç: /–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 08:30 –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –º—É—Å–æ—Ä")
        return

    weekday_str, time_str, task = match.groups()
    weekdays = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "mon", "–≤—Ç–æ—Ä–Ω–∏–∫": "tue", "—Å—Ä–µ–¥–∞": "wed",
        "—á–µ—Ç–≤–µ—Ä–≥": "thu", "–ø—è—Ç–Ω–∏—Ü–∞": "fri", "—Å—É–±–±–æ—Ç–∞": "sat", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "sun"
    }
    weekday = weekdays.get(weekday_str.lower())
    if not weekday:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.")
        return

    hour, minute = map(int, time_str.split(":"))
    description = f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ ({weekday_str.title()} –≤ {time_str}) ‚Äî {task}"
    reminder_list.append(description)

    job = scheduler.add_job(
        send_reminder,
        trigger=CronTrigger(day_of_week=weekday, hour=hour, minute=minute),
        args=[f"(–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ) {task}"]
    )
    reminder_jobs[f"reminder_{len(reminder_list)-1}"] = job
    await message.answer(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {description}")

@dp.message(Command("–µ–∂–µ–º–µ—Å—è—á–Ω–æ"))
async def monthly_reminder(message: types.Message):
    match = re.match(r"/–µ–∂–µ–º–µ—Å—è—á–Ω–æ (\d{1,2}) –≤ (\d{1,2}:\d{2}) (.+)", message.text, re.IGNORECASE)
    if not match:
        await message.answer("–§–æ—Ä–º–∞—Ç: /–µ–∂–µ–º–µ—Å—è—á–Ω–æ 15 –≤ 12:00 –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—á–µ—Ç—ã")
        return

    day, time_str, task = match.groups()
    hour, minute = map(int, time_str.split(":"))
    description = f"–ï–∂–µ–º–µ—Å—è—á–Ω–æ (–¥–µ–Ω—å {day} –≤ {time_str}) ‚Äî {task}"
    reminder_list.append(description)

    job = scheduler.add_job(
        send_reminder,
        trigger=CronTrigger(day=day, hour=hour, minute=minute),
        args=[f"(–µ–∂–µ–º–µ—Å—è—á–Ω–æ) {task}"]
    )
    reminder_jobs[f"reminder_{len(reminder_list)-1}"] = job
    await message.answer(f"‚úÖ –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {description}")

async def send_reminder(task):
    await bot.send_message(CHAT_ID, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task}")

@dp.message()
async def get_chat_id(message: types.Message):
    await message.answer(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{message.chat.id}`", parse_mode="Markdown")

@dp.startup()
async def on_startup(dispatcher: Dispatcher):
    scheduler.start()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
